const e={save(e,o){try{localStorage.setItem(e,o)}catch(e){console.error("[auto-form-sync] Failed to save to localStorage:",e)}},load(e){try{return localStorage.getItem(e)}catch(e){return console.error("[auto-form-sync] Failed to load from localStorage:",e),null}},remove(e){try{localStorage.removeItem(e)}catch(e){console.error("[auto-form-sync] Failed to remove from localStorage:",e)}}},o={save(e,o){try{sessionStorage.setItem(e,o)}catch(e){console.error("[auto-form-sync] Failed to save to sessionStorage:",e)}},load(e){try{return sessionStorage.getItem(e)}catch(e){return console.error("[auto-form-sync] Failed to load from sessionStorage:",e),null}},remove(e){try{sessionStorage.removeItem(e)}catch(e){console.error("[auto-form-sync] Failed to remove from sessionStorage:",e)}}};var t;function r(e,o){const t=e.id||e.classList[0],r=(o?.key||t).trim();if(""==r)throw new Error(`[auto-form-sync] Unable to find the storage key for this form: ${e}`);const n=document.querySelectorAll("form");if(Array.from(n).some(e=>e.dataset.key===r))throw new Error("[auto-form-sync] The key already exists. Please use different key or id name.");return r}function n(e){try{return JSON.parse(e)}catch(e){return null}}function a(e){return JSON.stringify(e)}!function(e){e.LocalStorage="LocalStorage",e.SessionStorage="SessionStorage",e.Custom="Custom"}(t||(t={}));const s=r=>{const{storage:n}=r;if(!n||n===t.SessionStorage)return o;if(n===t.LocalStorage)return e;if("object"==typeof n)return n;throw new Error(`[auto-form-sync] Invalid storage option: ${n}`)},c=(e,o)=>!("submit"===e.type||e instanceof HTMLButtonElement)&&(!e.disabled&&!e.dataset?.nosync&&!((e,o=[])=>o.some(o=>"string"==typeof o?o===e.id||o===e.name:o(e)))(e,o.exclude));async function i(e,o={}){const t=s(o),n=(e=>e.serializer??a)(o),i=(e=>e.debounce??300)(o),l=r(e,o);if(!l)return console.warn("[auto-form-sync] Unable to attach listeners: no storage key."),()=>{};const u=function(e,o=300){let t;return function(...r){clearTimeout(t),t=setTimeout(e,o,...r)}}(()=>{const r=((e,o)=>Array.from(e.elements).filter(e=>c(e,o)).map(e=>({name:e.name,id:e.id,value:"checkbox"==e.type?e.checked?"true":"false":e.value})))(e,o),a=n(r);t.save(l,a),o.onSave?.(r)},i),m=[];for(const t of e.elements){if(!c(t,o))continue;const e=t.type,r="checkbox"===e||"radio"===e||"SELECT"===t.tagName?"change":"input";t.addEventListener(r,()=>u()),m.push(()=>t.removeEventListener(r,()=>u()))}const f=async r=>{if("function"==typeof e.onsubmit){const o=e.onsubmit.call(e,r);o instanceof Promise&&await o}o.clearOnSubmit&&(await t.remove(l),o.onClear?.())};return e.addEventListener("submit",f),m.push(()=>e.removeEventListener("submit",f)),()=>m.forEach(e=>e())}async function l(e,o={}){const t=document.querySelector(e);if(!t)throw console.warn(`[auto-form-sync] Form not found: ${e}`),new Error(`[auto-form-sync] Form not found: ${e}`);(void 0===o?.restoreOnLoad||o.restoreOnLoad)&&await async function(e,o){const t=s(o),a=o?.deserializer||n,c=r(e,o),i=await t.load(c);if(!i||!a)return void console.warn(`[auto-form-sync] Unable to load serialized data for this form: ${e}`);const l=a(i);l&&(l?.forEach(o=>{const t=e.querySelector(`[name="${o.name}"]`)??(o.id?e.querySelector(`#${o.id}`):null);t&&(t.value=o.value.toString()),"checkbox"==t?.type&&(t.checked="true"===o?.value)}),o?.onRestore?.(l))}(t,o),await i(t,o),console.warn("[auto-form-sync] Initialized on form:",t)}export{l as autoFormSync};
//# sourceMappingURL=index.esm.min.js.map
